name: Windows-Release-Candidate

on:
  push:
    branches:
    - 'release/**'

jobs:
  pre_job:
    name: Build Preparation
    runs-on: ubuntu-latest
    outputs:
      old_version: ${{ steps.previoustag.outputs.tag }}
      new_version: ${{ steps.gitversion.outputs.majorMinorPatch }}
      build_number: ${{ steps.gitversion.outputs.buildMetaData }}
      old_year: 2006-${{ steps.current-time.outputs.year }}
      new_year: 2006-${{ steps.current-time.outputs.year }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.1
        id: current-time
        with:
          format: YYYYMMDD-HH
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id:   gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
  build:
    name: Build (Visual Studio)
    needs: pre_job
    runs-on: windows-latest
    env:
      old_version: ${{ needs.pre_job.outputs.old_version }}
      new_version: ${{ needs.pre_job.outputs.new_version }}
      build_number: ${{ needs.pre_job.outputs.build_number }}
      old_year: ${{ needs.pre_job.outputs.old_year }}
      new_year: ${{ needs.pre_job.outputs.new_year }}
    steps:
    - uses: actions/checkout@v2
    - name: Run upversion script
      run: python .\tools\upversion\upversion.py
    - name: Checkout submodules
      run: git submodule update --init --recursive
    - name: Turn on problem matcher
      uses: ammaraskar/msvc-problem-matcher@master
    - name: Run build powershell
      shell: pwsh
      run: |
        .\ci\win-release-x64.ps1
    - name: Install Python packages
      uses: BSFishy/pip-action@v1
      with:
        packages: |
          b2sdk
    - name: Upload artifact to B2
      run: python .\ci\upload-b2.py .\Output\zip Win-x64
      env:
        B2_APP_KEY: ${{ secrets.B2_APP_KEY }}
        B2_BUCKET_ID: ${{ secrets.B2_BUCKET_ID }}
        B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
    - name: Archive x64 build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Odamex-Win-x64
        path: Output/zip/*.zip
    - name: Archive x64 pdb artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Odamex-Win-x64-pdb
        path: Output/pdb/*.zip
  build-x32:
    name: Build (Visual Studio, 32-bit)
    needs: pre_job
    runs-on: windows-latest
    env:
      old_version: ${{ needs.pre_job.outputs.old_version }}
      new_version: ${{ needs.pre_job.outputs.new_version }}
      build_number: ${{ needs.pre_job.outputs.build_number }}
      old_year: ${{ needs.pre_job.outputs.old_year }}
      new_year: ${{ needs.pre_job.outputs.new_year }}
    steps:
    - uses: actions/checkout@v2
    - name: Run upversion script
      run: python .\tools\upversion\upversion.py
    - name: Checkout submodules
      run: git submodule update --init --recursive
    - name: Turn on problem matcher
      uses: ammaraskar/msvc-problem-matcher@master
    - name: Run build-x32 powershell
      shell: pwsh
      run: |
        .\ci\win-release-x86.ps1
    - name: Install Python packages
      uses: BSFishy/pip-action@v1
      with:
        packages: |
          b2sdk
    - name: Upload artifact to B2
      run: python .\ci\upload-b2.py .\Output\zip Win-x32
      env:
        B2_APP_KEY: ${{ secrets.B2_APP_KEY }}
        B2_BUCKET_ID: ${{ secrets.B2_BUCKET_ID }}
        B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
    - name: Archive x86 build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Odamex-Win-x86
        path: Output/zip/*.zip
    - name: Archive x86 pdb artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Odamex-Win-x86-pdb
        path: Output/pdb/*.zip
  package-and-upload:
    name: Package and Upload Artifacts
    runs-on: windows-latest
    needs: [pre_job, build, build-x32]
    env:
      old_version: ${{ needs.pre_job.outputs.old_version }}
      new_version: ${{ needs.pre_job.outputs.new_version }}
      build_number: ${{ needs.pre_job.outputs.build_number }}
      old_year: ${{ needs.pre_job.outputs.old_year }}
      new_year: ${{ needs.pre_job.outputs.new_year }}
    steps:
    - uses: actions/checkout@v2
    - name: Run upversion script
      run: python .\tools\upversion\upversion.py
    - name: Checkout submodules
      run: git submodule update --init --recursive
    - name: Create tar.gz
      shell: bash
      run: git ls-files --others --exclude-standard --cached -z | xargs -0 tar --transform 's,^,odamex-src-${{ env.new_version }}/,' -czvf odamex-src-${{ env.new_version }}.tar.gz
    - name: Create tar.xz
      shell: bash
      run: git ls-files --others --exclude-standard --cached -z | xargs -0 tar --transform 's,^,odamex-src-${{ env.new_version }}/,' -cJvf odamex-src-${{ env.new_version }}.tar.xz
    - name: Download x86 artifacats
      uses: actions/download-artifact@v3
      with:
        name: Odamex-Win-x86
    - name: Download x64 artifacats
      uses: actions/download-artifact@v3
      with:
        name: Odamex-Win-x64
    - name: List directory contents
      run: ls
    - name: Stage and run setup compiler
      shell: pwsh
      run: |
        .\ci\stage-inno-setup-and-run.ps1
    - name: Upload setup installer to Github
      uses: actions/upload-artifact@v2
      with:
        name: Odamex-Installer
        path: 'Output/*.exe'
    - name: Upload tar.xz
      uses: actions/upload-artifact@v2
      with:
        name: Odamex-tar-xz
        path: './*.tar.xz'
    - name: Upload tar.gz
      uses: actions/upload-artifact@v2
      with:
        name: Odamex-tar-gz
        path: './*.tar.gz'
  # build-mingw:
  #   name: Build (MinGW)
  #   runs-on: windows-latest
  #   steps:
  #   - name: Checkout source
  #     uses: actions/checkout@v2
  #   - name: Checkout submodules
  #     run: git submodule update --init --recursive
  #   - name: Install packages
  #     uses: crazy-max/ghaction-chocolatey@v1
  #     with:
  #       args: install ninja
  #   - name: Prepare build
  #     run: .\ci\win-mingw-buildgen.ps1
  #   - name: Run build
  #     run: cmake --build .\build-gcc\

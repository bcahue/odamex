name: Windows-Release

on:
  push:
    branches:
    - 'release/**'

jobs:
  pre_job:
    name: Build Preparation
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check_skip.outputs.should_skip }}
      old_version: ${{ steps.previoustag.outputs.tag }}
      new_version: ${{ steps.semvers.outputs.patch }}
      old_year: 2006-${{ steps.current-time.outputs.year }}
      new_year: 2006-${{ steps.current-time.outputs.year }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - name: Check for build skip
        id: check_skip
        run: bash ci/check-skip.sh
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found
      - name: 'Get next minor version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.1
        id: current-time
        with:
          format: YYYYMMDD-HH
  build-and-package:
    name: Build (Visual Studio)
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: windows-latest
    env:
      should_skip: ${{ needs.pre_job.outputs.should_skip }}
      old_version: ${{ needs.pre_job.outputs.old_version }}
      new_version: ${{ needs.pre_job.outputs.new_version }}
      old_year: ${{ needs.pre_job.outputs.old_year }}
      new_year: ${{ needs.pre_job.outputs.new_year }}
    steps:
    - uses: actions/checkout@v2
    - name: Run upversion script
      run: python .\tools\upversion\upversion.py
    - name: Checkout submodules
      run: git submodule update --init --recursive
    - name: Install Python packages
      uses: BSFishy/pip-action@v1
      with:
        packages: |
          b2sdk
    - name: Turn on problem matcher
      uses: ammaraskar/msvc-problem-matcher@master
    - name: Run build powershell
      shell: pwsh
      run: |
        .\installer\windows\build_release.ps1
    - name: Upload artifact to B2
      run: python .\ci\upload-b2.py .\build\archive Win-x64
      env:
        B2_APP_KEY: ${{ secrets.B2_APP_KEY }}
        B2_BUCKET_ID: ${{ secrets.B2_BUCKET_ID }}
        B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
    - name: Upload artifact to Github
      uses: actions/upload-artifact@v2
      with:
        name: Odamex-Win-x64
        path: 'build/artifact/*'
#  upload:
#    name: Upload all artifacts to Github Artifacts
#    runs-on: windows-latest
  # build-mingw:
  #   name: Build (MinGW)
  #   runs-on: windows-latest
  #   steps:
  #   - name: Checkout source
  #     uses: actions/checkout@v2
  #   - name: Checkout submodules
  #     run: git submodule update --init --recursive
  #   - name: Install packages
  #     uses: crazy-max/ghaction-chocolatey@v1
  #     with:
  #       args: install ninja
  #   - name: Prepare build
  #     run: .\ci\win-mingw-buildgen.ps1
  #   - name: Run build
  #     run: cmake --build .\build-gcc\
